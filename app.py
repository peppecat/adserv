import json
import os
import uuid  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
import sys
import requests
sys.stdout.reconfigure(encoding='utf-8')
from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify, abort,send_file
from datetime import datetime
from functools import wraps
from werkzeug.utils import secure_filename


app = Flask(__name__, template_folder='app/templates', static_folder='app/static')
app.secret_key = 'supersecretkey'


# ====================== Telegram BOT ======================
TELEGRAM_BOT_TOKEN = '7726856877:AAFIslzTXmB5FCw2zDHuPswiybUaCGxiNSw'
TELEGRAM_CHAT_ID = '2045150846'

def send_telegram_notification(username, message_type, amount=None, payment_method=None, order_data=None):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("Telegram notifications are not configured")
        return None

    messages = {
        'registration': f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\nUsername: {username}",
        'payment': f"üí≥ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!\n\n"
                  f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                  f"üí∞ –°—É–º–º–∞: {amount} USD\n"
                  f"üîß –ú–µ—Ç–æ–¥: {payment_method}\n"
                  f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        'new_order': f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                    f"üì¶ –ó–∞–∫–∞–∑: {order_data.get('product', 'N/A') if order_data else 'N/A'}\n"
                    f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_data.get('quantity', 1) if order_data else 1}\n"
                    f"üíµ –°—É–º–º–∞: {order_data.get('amount', 0) if order_data else 0} USD\n"
                    f"üìÖ –î–∞—Ç–∞: {order_data.get('date', datetime.now().strftime('%Y-%m-%d %H:%M:%S')) if order_data else datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"üÜî ID –∑–∞–∫–∞–∑–∞: {order_data.get('id', 'N/A') if order_data else 'N/A'}"
    }
    
    message = messages.get(message_type)
    if not message:
        return None

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message
    }
    try:
        response = requests.post(url, data=payload)
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        return None



DEFAULT_STEAM_SETTINGS = {
    'base_fee': 10,  # 10% –±–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è
    'discount_levels': [
        (0, 0),     # 0% - –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        (50, 2),    # 2% - 50 –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        (500, 20),  # 20% - 500 –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        (1000, 25), # 25% - 1k –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        (2000, 30), # 30% - 2k –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        (4000, 35)  # 35% - 4k –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
    ]
}



global steam_discount_levels, steam_base_fee
steam_discount_levels = DEFAULT_STEAM_SETTINGS['discount_levels']
steam_base_fee = DEFAULT_STEAM_SETTINGS['base_fee']


# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = 'users.json'
REFERRALS_FILE = 'referrals.json'
PROMOCODES_FILE = 'promocodes.json'
REWARDS_FILE = 'rewards.json'
USER_REWARDS_FILE = 'user_rewards.json'  # –ù–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
AFFILIATES_FILE = 'affiliates.json'
PARTNERS_FILE = 'partners.json'
PAYMENTS_FILE = 'payments.json'
PRODUCTS_FILE = 'products.json'
CARDS_FILE = 'cards.json'
WHITELIST_FILE = 'whitelist_users.json'
STEAM_DISCOUNTS_FILE = 'steam_discounts.json'
STORES_FILE = 'stores.json'
RESELLER_FILE = 'reseller_stores.json'


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
def load_data():
    global users, referrals, promocodes, rewards, user_rewards
    global affiliate_users, partners_data, affiliate_payments, products, cards, whitelist_users
    global active_bonuses, steam_discount_levels, steam_base_fee, stores, reseller_stores
    global TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID  # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Telegra

    try:
        with open(USERS_FILE, 'r') as f:
            users = json.load(f)
    except FileNotFoundError:
        users = {}

    try:
        with open(RESELLER_FILE, 'r') as f:
            reseller_stores = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        reseller_stores = []

    try:
        with open(STEAM_DISCOUNTS_FILE, 'r') as f:
            steam_settings = json.load(f)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö - –µ—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            if isinstance(steam_settings, list):
                steam_settings = {
                    'base_fee': 10,
                    'discount_levels': steam_settings
                }
            steam_discount_levels = steam_settings.get('discount_levels', [])
            steam_base_fee = steam_settings.get('base_fee', 10)  # 10% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    except FileNotFoundError:
        steam_settings = DEFAULT_STEAM_SETTINGS
        steam_discount_levels = steam_settings['discount_levels']
        steam_base_fee = steam_settings['base_fee']

    try:
        with open(REFERRALS_FILE, 'r') as f:
            referrals = json.load(f)
    except FileNotFoundError:
        referrals = {}

    try:
        with open(STORES_FILE, 'r') as f:
            stores = json.load(f)
    except FileNotFoundError:
        stores = {}

    try:
        with open(PROMOCODES_FILE, 'r') as f:
            promocodes = json.load(f)
    except FileNotFoundError:
        promocodes = {}

    try:
        with open(REWARDS_FILE, 'r') as f:
            rewards = json.load(f)
    except FileNotFoundError:
        rewards = []  # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ (–Ω–∞–∑–≤–∞–Ω–∏—è)

    try:
        with open(USER_REWARDS_FILE, 'r') as f:
            user_rewards = json.load(f)
    except FileNotFoundError:
        user_rewards = {}  # –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_rewards –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for username in users.keys():
            user_rewards[username] = {
                'purchases': users[username].get('orders', 0),
                'assigned_reward': None,
                'reward_status': None
            }

    try:
        with open(AFFILIATES_FILE, 'r') as f:
            affiliate_users = json.load(f)
    except FileNotFoundError:
        affiliate_users = []

    try:
        with open(PARTNERS_FILE, 'r') as f:
            partners_data = json.load(f)
    except FileNotFoundError:
        partners_data = []

    try:
        with open(PAYMENTS_FILE, 'r') as f:
            affiliate_payments = json.load(f)
    except FileNotFoundError:
        affiliate_payments = []

    try:
        with open(PRODUCTS_FILE, 'r', encoding='utf-8') as f:
            products = json.load(f)
    except FileNotFoundError:
        products = {}

    try:
        with open(CARDS_FILE, 'r') as f:
            cards = json.load(f)
    except FileNotFoundError:
        cards = []

    try:
        with open(WHITELIST_FILE, 'r') as f:
            whitelist_users = json.load(f)
    except FileNotFoundError:
        whitelist_users = []
    try:
        with open('telegram_settings.json', 'r') as f:
            telegram_settings = json.load(f)
        TELEGRAM_BOT_TOKEN = telegram_settings.get('bot_token', '')
        TELEGRAM_CHAT_ID = telegram_settings.get('chat_id', '')
    except FileNotFoundError:
        TELEGRAM_BOT_TOKEN = '7726856877:AAFIslzTXmB5FCw2zDHuPswiybUaCGxiNSw'  # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        TELEGRAM_CHAT_ID = '2045150846'

    active_bonuses = []  # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª—ã
def save_data():
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f, indent=4)
    with open(REFERRALS_FILE, 'w') as f:
        json.dump(referrals, f, indent=4)
    with open(PROMOCODES_FILE, 'w') as f:
        json.dump(promocodes, f, indent=4)
    with open(REWARDS_FILE, 'w') as f:
        json.dump(rewards, f, indent=4)
    with open(USER_REWARDS_FILE, 'w') as f:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        json.dump(user_rewards, f, indent=4)
    with open(AFFILIATES_FILE, 'w') as f:
        json.dump(affiliate_users, f, indent=4)
    with open(PARTNERS_FILE, 'w') as f:
        json.dump(partners_data, f, indent=4)
    with open(PAYMENTS_FILE, 'w') as f:
        json.dump(affiliate_payments, f, indent=4)
    with open(PRODUCTS_FILE, 'w') as f:
        json.dump(products, f, indent=4)
    with open(CARDS_FILE, 'w') as f:
        json.dump(cards, f, indent=4)
    with open(WHITELIST_FILE, 'w') as f:
        json.dump(whitelist_users, f, indent=4)
    with open(STEAM_DISCOUNTS_FILE, 'w') as f:
        json.dump({
            'base_fee': steam_base_fee,
            'discount_levels': steam_discount_levels
        }, f, indent=4)
    with open(STORES_FILE, 'w') as f:
        json.dump(stores, f, indent=4)
    with open(RESELLER_FILE, 'w') as f:
        json.dump(reseller_stores, f, indent=4)


def check_blocked(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'username' in session:
            username = session['username']
            load_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if username in users and users[username].get('is_banned', False):
                return render_template('blocked_account.html', username=username)  
        return f(*args, **kwargs)
    return decorated_function



@app.route('/admin/data-management')
def data_management():
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 403
    return render_template('admin_data_management.html')

@app.route('/admin/export-data')
def export_data():
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    
    data_type = request.args.get('type', 'all')
    
    try:
        if data_type == 'users':
            data = users
        elif data_type == 'orders':
            data = {}
            for user, user_data in users.items():
                if 'orders' in user_data:
                    data[user] = user_data['orders']
        elif data_type == 'payments':
            data = affiliate_payments
        elif data_type == 'whitelist':
            data = whitelist_users
        elif data_type == 'products':
            data = products
        elif data_type == 'referrals':
            data = referrals
        elif data_type == 'promocodes':
            data = promocodes
        elif data_type == 'affiliates':
            data = affiliate_users
        elif data_type == 'partners':
            data = partners_data
        elif data_type == 'rewards':
            data = rewards
        elif data_type == 'user_rewards':
            data = user_rewards
        elif data_type == 'cards':
            data = cards
        elif data_type == 'steam_discounts':
            data = {
                'base_fee': steam_base_fee,
                'discount_levels': steam_discount_levels
            }
        elif data_type == 'stores':
            data = stores
        elif data_type == 'reseller_stores':
            data = reseller_stores
        elif data_type == 'all':
            data = {
                'users': users,
                'referrals': referrals,
                'promocodes': promocodes,
                'affiliates': affiliate_users,
                'partners': partners_data,
                'payments': affiliate_payments,
                'products': products,
                'whitelist': whitelist_users,
                'rewards': rewards,
                'user_rewards': user_rewards,
                'cards': cards,
                'steam_discounts': {
                    'base_fee': steam_base_fee,
                    'discount_levels': steam_discount_levels
                },
                'stores': stores,
                'reseller_stores': reseller_stores
            }
        else:
            return jsonify({'success': False, 'message': 'Invalid data type'}), 400
        
        return jsonify({'success': True, 'data': data, 'type': data_type})
    
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/admin/import-data', methods=['POST'])
def import_data():
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    
    # –û–±—ä—è–≤–ª—è–µ–º –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    global users, referrals, promocodes, affiliate_users, partners_data, affiliate_payments
    global products, whitelist_users, rewards, user_rewards, cards, steam_base_fee, steam_discount_levels
    global stores, reseller_stores
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª
        if 'file' in request.files:
            file = request.files['file']
            if file.filename == '':
                return jsonify({'success': False, 'message': 'No file selected'}), 400
            
            if file and file.filename.endswith('.json'):
                filename = secure_filename(file.filename)
                data_type = request.form.get('data_type', 'all')
                
                # –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º JSON
                json_data = json.load(file)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
                if data_type == 'users':
                    users = json_data
                elif data_type == 'orders':
                    for user, orders in json_data.items():
                        if user in users:
                            users[user]['orders'] = orders
                elif data_type == 'payments':
                    affiliate_payments = json_data
                elif data_type == 'whitelist':
                    whitelist_users = json_data
                elif data_type == 'products':
                    products = json_data
                elif data_type == 'referrals':
                    referrals = json_data
                elif data_type == 'promocodes':
                    promocodes = json_data
                elif data_type == 'affiliates':
                    affiliate_users = json_data
                elif data_type == 'partners':
                    partners_data = json_data
                elif data_type == 'rewards':
                    rewards = json_data
                elif data_type == 'user_rewards':
                    user_rewards = json_data
                elif data_type == 'cards':
                    cards = json_data
                elif data_type == 'steam_discounts':
                    steam_base_fee = json_data.get('base_fee', 10)
                    steam_discount_levels = json_data.get('discount_levels', [])
                elif data_type == 'stores':
                    stores = json_data
                elif data_type == 'reseller_stores':
                    reseller_stores = json_data
                elif data_type == 'all':
                    users = json_data.get('users', users)
                    referrals = json_data.get('referrals', referrals)
                    promocodes = json_data.get('promocodes', promocodes)
                    affiliate_users = json_data.get('affiliates', affiliate_users)
                    partners_data = json_data.get('partners', partners_data)
                    affiliate_payments = json_data.get('payments', affiliate_payments)
                    products = json_data.get('products', products)
                    whitelist_users = json_data.get('whitelist', whitelist_users)
                    rewards = json_data.get('rewards', rewards)
                    user_rewards = json_data.get('user_rewards', user_rewards)
                    cards = json_data.get('cards', cards)
                    steam_settings = json_data.get('steam_discounts', {})
                    steam_base_fee = steam_settings.get('base_fee', steam_base_fee)
                    steam_discount_levels = steam_settings.get('discount_levels', steam_discount_levels)
                    stores = json_data.get('stores', stores)
                    reseller_stores = json_data.get('reseller_stores', reseller_stores)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                save_data()
                
                return jsonify({'success': True, 'message': 'Data imported successfully', 'type': data_type})
            else:
                return jsonify({'success': False, 'message': 'Invalid file type'}), 400
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            data = request.get_json()
            if not data:
                return jsonify({'success': False, 'message': 'No data provided'}), 400
            
            data_type = data.get('type', 'all')
            json_data = data.get('data', {})
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
            if data_type == 'users':
                users = json_data
            elif data_type == 'orders':
                for user, orders in json_data.items():
                    if user in users:
                        users[user]['orders'] = orders
            elif data_type == 'payments':
                affiliate_payments = json_data
            elif data_type == 'whitelist':
                whitelist_users = json_data
            elif data_type == 'products':
                products = json_data
            elif data_type == 'referrals':
                referrals = json_data
            elif data_type == 'promocodes':
                promocodes = json_data
            elif data_type == 'affiliates':
                affiliate_users = json_data
            elif data_type == 'partners':
                partners_data = json_data
            elif data_type == 'rewards':
                rewards = json_data
            elif data_type == 'user_rewards':
                user_rewards = json_data
            elif data_type == 'cards':
                cards = json_data
            elif data_type == 'steam_discounts':
                steam_base_fee = json_data.get('base_fee', 10)
                steam_discount_levels = json_data.get('discount_levels', [])
            elif data_type == 'stores':
                stores = json_data
            elif data_type == 'reseller_stores':
                reseller_stores = json_data
            elif data_type == 'all':
                users = json_data.get('users', users)
                referrals = json_data.get('referrals', referrals)
                promocodes = json_data.get('promocodes', promocodes)
                affiliate_users = json_data.get('affiliates', affiliate_users)
                partners_data = json_data.get('partners', partners_data)
                affiliate_payments = json_data.get('payments', affiliate_payments)
                products = json_data.get('products', products)
                whitelist_users = json_data.get('whitelist', whitelist_users)
                rewards = json_data.get('rewards', rewards)
                user_rewards = json_data.get('user_rewards', user_rewards)
                cards = json_data.get('cards', cards)
                steam_settings = json_data.get('steam_discounts', {})
                steam_base_fee = steam_settings.get('base_fee', steam_base_fee)
                steam_discount_levels = steam_settings.get('discount_levels', steam_discount_levels)
                stores = json_data.get('stores', stores)
                reseller_stores = json_data.get('reseller_stores', reseller_stores)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            save_data()
            
            return jsonify({'success': True, 'message': 'Data imported successfully', 'type': data_type})
    
    except json.JSONDecodeError:
        return jsonify({'success': False, 'message': 'Invalid JSON format'}), 400
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500
    
@app.route('/admin/download-file')
def download_file():
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    
    filename = request.args.get('filename')
    if not filename or not os.path.exists(filename):
        return jsonify({'success': False, 'message': 'File not found'}), 404
    
    return send_file(filename, as_attachment=True)



# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@app.route('/register', methods=['GET', 'POST'])
def register():
    load_data()
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password1']
        password_confirm = request.form['password2']
        if password != password_confirm:
            flash('The passwords do not match', 'error')
            return render_template('register.html')
        if username in users:
            flash('Username already exists', 'error')
            return render_template('register.html')
        
        users[username] = {'password': password,
                          'balance': {'trc20': 0, 'erc20': 0, 'bep20': 0, 'card': 0},
                          'orders': 0,
                          'expenses': 0,
                          'userorders': [],
                          'topups': []
                         }
        save_data()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        send_telegram_notification(username, 'registration')
        
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/register/<ref_code>', methods=['GET', 'POST'])
def register_ref(ref_code):
    load_data()
    if ref_code not in referrals:
        return "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password1']
        password_confirm = request.form['password2']

        if password != password_confirm:
            flash('The passwords do not match', 'error')
            return render_template('register.html')

        if username in users:
            flash('Username already exists', 'error')

        users[username] = {
            'password': password,
            'balance': {'trc20': 0, 'erc20': 0, 'bep20': 0, 'card': 0},
            'orders': 0,
            'expenses': 0,
            'userorders': [],
            'topups': []
        }

        if username and password:
            referrals[ref_code].append({
                'name': username,
                'deposit': 0,
                'status': 'pending',
                'payout': 0
            })

        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        return redirect(url_for('login'))

    return render_template('register.html', ref_code=ref_code)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
@app.route('/login', methods=['GET', 'POST'])
def login():
    load_data()
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username in users and users[username]['password'] == password:
            session['username'] = username
            return redirect(url_for('dashboard'))
        flash("Incorrect username or password!", 'error')  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return redirect(url_for('login'))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    return render_template('login.html')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
load_data()





# –°—Ç—Ä–∞–Ω–∏—Ü–∞ Admin
@app.route('/admin/users', methods=['GET', 'POST'])
def admin_users():
    load_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if 'username' not in session:
        return redirect(url_for('login'))
    if session['username'] != 'Dim4ikgoo$e101$':
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", 403

    if request.method == 'POST':
        action = request.form.get('action')
        target_user = request.form.get('target_user')

        if target_user in users:
            if action == 'update_user':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ KYC
                is_banned = request.form.get('is_banned', 'false') == 'true'
                kyc_status = request.form.get('kyc_status', 'not_required')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                users[target_user]['is_banned'] = is_banned
                users[target_user]['kyc_status'] = kyc_status
                users[target_user]['kyc_verified'] = kyc_status == 'verified'
                
                # –ï—Å–ª–∏ KYC –ø—Ä–æ–π–¥–µ–Ω, —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                if kyc_status == 'verified':
                    users[target_user].pop('kyc_prompt_shown', None)
                    users[target_user].pop('had_high_balance', None)
                
                flash(f'–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success')
                save_data()
                return redirect(url_for('admin_users'))

            elif action == 'edit_balance':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                balance_type = request.form.get('balance_type')
                new_value = float(request.form.get('new_balance'))
                if balance_type in users[target_user]['balance']:
                    users[target_user]['balance'][balance_type] = new_value
                elif balance_type in ['orders', 'expenses']:
                    users[target_user][balance_type] = new_value
                flash(f'–ë–∞–ª–∞–Ω—Å {balance_type} –¥–ª—è {target_user} –æ–±–Ω–æ–≤–ª–µ–Ω', 'success')

            elif action == 'edit_topup':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                date = request.form.get('date')
                network = request.form.get('network')
                amount = float(request.form.get('amount'))
                status = request.form.get('status')

                try:
                    if 'T' in date:
                        dt = datetime.fromisoformat(date)
                        formatted_date = dt.strftime('%Y-%m-%d %H:%M:%S')
                    else:
                        dt = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
                        formatted_date = date
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {e}")
                    dt = datetime.now()
                    formatted_date = dt.strftime('%Y-%m-%d %H:%M:%S')

                if network in ['BEP20', 'Card', 'TRC20', 'ERC20']:
                    topup_found = False
                    for topup in users[target_user].get('topups', []):
                        if topup['date'] == formatted_date and topup['network'] == network:
                            topup['amount'] = amount
                            topup['status'] = status
                            topup_found = True
                            break

                    if not topup_found:
                        if 'topups' not in users[target_user]:
                            users[target_user]['topups'] = []
                        users[target_user]['topups'].append({
                            'date': formatted_date,
                            'network': network,
                            'amount': amount,
                            'status': status
                        })

                    if status == 'Success':
                        balance_key = network.lower() if network != 'Card' else 'card'
                        users[target_user]['balance'][balance_key] = users[target_user]['balance'].get(balance_key, 0) + amount
                
                flash('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ', 'success')

            elif action == 'edit_topup_status':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                date = request.form.get('date')
                network = request.form.get('network')
                new_status = request.form.get('new_status')

                try:
                    if 'T' in date:
                        dt = datetime.fromisoformat(date)
                        formatted_date = dt.strftime('%Y-%m-%d %H:%M:%S')
                    else:
                        dt = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
                        formatted_date = date
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {e}")
                    formatted_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

                for topup in users[target_user].get('topups', []):
                    if topup['date'] == formatted_date and topup['network'] == network:
                        old_status = topup['status']
                        topup['status'] = new_status

                        if new_status == 'Success' and old_status != 'Success':
                            balance_key = network.lower() if network != 'Card' else 'card'
                            users[target_user]['balance'][balance_key] = users[target_user]['balance'].get(balance_key, 0) + topup['amount']
                        elif old_status == 'Success' and new_status != 'Success':
                            balance_key = network.lower() if network != 'Card' else 'card'
                            users[target_user]['balance'][balance_key] = users[target_user]['balance'].get(balance_key, 0) - topup['amount']
                        break
                
                flash('–°—Ç–∞—Ç—É—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω', 'success')

            elif action == 'delete_user':
                del users[target_user]
                flash(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user} —É–¥–∞–ª–µ–Ω', 'success')

            elif action == 'delete_topup':
                date = request.form.get('date')
                network = request.form.get('network')
                
                try:
                    if 'T' in date:
                        dt = datetime.fromisoformat(date)
                        formatted_date = dt.strftime('%Y-%m-%d %H:%M:%S')
                    else:
                        dt = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
                        formatted_date = date
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {e}")
                    formatted_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                
                users[target_user]['topups'] = [
                    topup for topup in users[target_user].get('topups', [])
                    if not (topup['date'] == formatted_date and topup['network'] == network)
                ]
                
                flash('–ó–∞–ø–∏—Å—å –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∞', 'success')

            save_data()

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    for user, info in users.items():
        if 'topups' in info:
            def get_datetime(topup):
                date_str = topup['date']
                try:
                    if 'T' in date_str:
                        return datetime.fromisoformat(date_str)
                    else:
                        return datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S')
                except:
                    return datetime.min
                    
            info['topups'] = sorted(info['topups'], key=get_datetime, reverse=True)

    return render_template('admin_users.html', 
                         users=users, 
                         now=datetime.now().strftime('%Y-%m-%dT%H:%M:%S'),
                         kyc_statuses=['not_required', 'pending', 'verified'])




@app.route('/admin/create_code', methods=['POST'])
def create_code():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))
    if session['username'] != 'Dim4ikgoo$e101$':
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", 403

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    product_id = request.form.get('product_id')
    new_code = request.form.get('new_code')
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ product_id
    category = None
    for key in products:
        if product_id in products[key]:
            category = key
            break

    if category:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ "codes"
        if isinstance(products[category][product_id], dict):
            products[category][product_id]["codes"].append(new_code)
        else:
            # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫
            products[category][product_id] = {
                "description": products[category][product_id],
                "codes": [new_code]
            }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ products.json
        save_data()

    return redirect(url_for('adminlots'))

@app.route('/admin/delete_code', methods=['POST'])
def delete_code():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))
    if session['username'] != 'Dim4ikgoo$e101$':
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", 403

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    product_id = request.form.get('product_id')
    code_to_delete = request.form.get('code')
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ product_id
    category = None
    for key in products:
        if product_id in products[key]:
            category = key
            break

    if category and code_to_delete in products[category][product_id]["codes"]:
        # –£–¥–∞–ª—è–µ–º –∫–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
        products[category][product_id]["codes"].remove(code_to_delete)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª products.json
        save_data()

    return redirect(url_for('adminlots'))



@app.route('/admin/orders', methods=['GET', 'POST'])
def admin2():
    load_data()
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 403

    if request.method == 'POST':
        target_user = request.form.get('target_user')
        category = request.form.get('category')
        product = request.form.get('product')
        price = request.form.get('price')
        amount = request.form.get('amount')
        date = request.form.get('date')

        if date:
            try:
                try:
                    date_obj = datetime.strptime(date, '%Y-%m-%dT%H:%M:%S')
                except ValueError:
                    date_obj = datetime.strptime(date, '%Y-%m-%dT%H:%M')
                formatted_date = date_obj.strftime('%Y-%m-%d %H:%M:%S')
            except ValueError:
                formatted_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        else:
            formatted_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        if target_user in users:
            new_order = {
                'id': str(uuid.uuid4()),
                'category': category,
                'product': product,
                'price': price,
                'amount': amount,
                'date': formatted_date,
                'timestamp': datetime.now().timestamp(),
                'status': 'pending'  # –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—É—á–∞—é—Ç —Å—Ç–∞—Ç—É—Å pending –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
            if 'userorders' not in users[target_user]:
                users[target_user]['userorders'] = []
            users[target_user]['userorders'].append(new_order)
            save_data()

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 15
    all_orders = []
    recent_orders = []
    
    for user, info in users.items():
        if 'userorders' in info:
            # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'pending', –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–¥–∞–Ω
            for order in info['userorders']:
                if 'status' not in order:
                    order['status'] = 'pending'
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
                order_with_user = order.copy()
                order_with_user['user'] = user
                all_orders.append(order_with_user)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            info['userorders'].sort(
                key=lambda x: (
                    datetime.strptime(x['date'], '%Y-%m-%d %H:%M:%S').timestamp(),
                    x['timestamp']
                ),
                reverse=True
            )
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    all_orders.sort(
        key=lambda x: (
            datetime.strptime(x['date'], '%Y-%m-%d %H:%M:%S').timestamp(),
            x['timestamp']
        ),
        reverse=True
    )
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–∫–∞–∑–æ–≤
    recent_orders = all_orders[:15]
    
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    
    return render_template(
        'admin_orders.html', 
        users=users,
        recent_orders=recent_orders,
        all_orders=all_orders
    )

@app.route('/admin/update_order_status/<user>/<order_id>', methods=['POST'])
def update_order_status(user, order_id):
    load_data()
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 403

    new_status = request.form.get('status')
    if user in users and 'userorders' in users[user]:
        for order in users[user]['userorders']:
            if order['id'] == order_id:
                old_status = order.get('status', 'pending')
                order['status'] = new_status
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
                if new_status == 'canceled' and old_status != 'canceled':
                    try:
                        price = float(order['price'])
                        amount = int(order['amount'])
                        total_refund = price * amount
                        
                        if 'balance' not in users[user]:
                            users[user]['balance'] = {}
                        
                        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –≤ USD
                        if 'USD' not in users[user]['balance']:
                            users[user]['balance']['USD'] = 0.0
                        
                        users[user]['balance']['USD'] += total_refund
                    except (ValueError, KeyError) as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
                
                save_data()
                break
    
    return redirect(url_for('admin2'))

@app.route('/admin/delete_order/<user>/<order_id>', methods=['POST'])
def delete_order(user, order_id):
    load_data()
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 403

    if user in users and 'userorders' in users[user]:
        users[user]['userorders'] = [o for o in users[user]['userorders'] if o['id'] != order_id]
        save_data()
    
    return redirect(url_for('admin2'))

@app.route('/admin/save_key/<user>/<order_id>', methods=['POST'])
def save_key(user, order_id):
    load_data()
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 403

    key = request.form.get('key')
    if user in users and 'userorders' in users[user]:
        for order in users[user]['userorders']:
            if order['id'] == order_id:
                order['key'] = key
                break
        save_data()
    
    return redirect(url_for('admin2'))

@app.route('/admin/update_order_date/<user>/<order_id>', methods=['POST'])
def update_order_date(user, order_id):
    load_data()
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 403

    new_date = request.form.get('new_date')
    if user in users and 'userorders' in users[user]:
        for order in users[user]['userorders']:
            if order['id'] == order_id:
                try:
                    formats = [
                        '%Y-%m-%dT%H:%M:%S',
                        '%Y-%m-%dT%H:%M',
                        '%Y-%m-%d %H:%M:%S',
                        '%Y-%m-%d %H:%M'
                    ]
                    
                    parsed_date = None
                    for fmt in formats:
                        try:
                            parsed_date = datetime.strptime(new_date, fmt)
                            break
                        except ValueError:
                            continue
                    
                    if parsed_date:
                        order['date'] = parsed_date.strftime('%Y-%m-%d %H:%M:%S')
                        order['timestamp'] = datetime.now().timestamp()
                        save_data()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞: {e}")
                break
    
    return redirect(url_for('admin2'))

@app.route('/orders')
@check_blocked
def orders():
    load_data()
    if 'username' not in session:
        flash('Please login to access the dashboard', 'error')
        return redirect(url_for('login'))

    username = session['username']
    if username not in users:
        flash('User not found', 'error')
        return redirect(url_for('login'))

    user_info = users[username]
    balances = user_info.get('balance', {})
    userorders = user_info.get('userorders', [])
    kyc_verified = user_info.get('kyc_verified', False)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
    userorders.sort(
        key=lambda x: (
            datetime.strptime(x['date'], '%Y-%m-%d %H:%M:%S').timestamp(),
            x['timestamp']
        ),
        reverse=True
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ - —Å–∞–º—ã–π –Ω–æ–≤—ã–π)
    if userorders:
        last_order = userorders[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ
        if not last_order.get('notification_sent'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            send_telegram_notification(
                username=username,
                message_type='new_order',
                order_data=last_order
            )
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            last_order['notification_sent'] = True
            save_data()

    return render_template('orders.html',
                         username=username,
                         balances=balances,
                         userorders=userorders,
                         kyc_verified=kyc_verified)






@app.route('/admin/payments', methods=['GET', 'POST'])
def admin3():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))
    
    if session['username'] != 'Dim4ikgoo$e101$':
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", 403

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –∫–∞—Ä—Ç –∏ –∞–¥—Ä–µ—Å–æ–≤
    if 'payments' not in users:
        users['payments'] = {"bep20": "", "erc20": "", "trc20": "", "sol": "", "near": ""}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤
    if request.method == 'POST':
        if 'delete_card' in request.form:
            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ ID
            card_id = request.form['delete_card']
            global cards
            cards = [card for card in cards if card['id'] != card_id]
            save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã

        elif 'delete' in request.form:
            # –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
            currency = request.form['delete']
            users['payments'][currency] = ""
            save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞

        else:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
            for currency in users['payments'].keys():
                users['payments'][currency] = request.form.get(currency, "")
            save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –∏ –∞–¥—Ä–µ—Å–æ–≤
    return render_template('admin_payments.html', 
                           users=users, 
                           payments=users['payments'], 
                           cards=cards)  # –ü–µ—Ä–µ–¥–∞–µ–º –∏ –∫–∞—Ä—Ç—ã, –∏ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è








@app.route('/reseller', methods=['GET', 'POST'])
@check_blocked
def reseller():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    with open(USERS_FILE, 'r') as users_file:
        users = json.load(users_file)
    with open(STORES_FILE, 'r') as stores_file:
        stores = json.load(stores_file)
    try:
        with open(RESELLER_FILE, 'r') as reseller_file:
            reseller_data = json.load(reseller_file)
    except (FileNotFoundError, json.JSONDecodeError):
        reseller_data = {}

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω—ã —Ä–µ—Å–µ–ª–ª–µ—Ä—Å–∫–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try:
        with open('financial_settings.json', 'r') as f:
            financial_settings = json.load(f)
            reseller_cost = float(financial_settings.get('reseller_price', 15.00))
    except (FileNotFoundError, json.JSONDecodeError):
        reseller_cost = 15.00  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if 'username' not in session:
        flash('Please login to access this page', 'error')
        return redirect(url_for('login'))

    username = session['username']
    user_data = users.get(username, {})
    balances = user_data.get('balance', {'card': 0, 'bep20': 0})
    kyc_verified = user_data.get('kyc_verified', False)  # –î–æ–±–∞–≤–ª—è–µ–º KYC —Å—Ç–∞—Ç—É—Å
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    user_store = stores.get(username)
    if not user_store or user_store.get('status') != 'active':
        flash('You need an active store to access reseller program', 'error')
        return redirect(url_for('affilate'))

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_reseller_stores = [store for slug, store in reseller_data.items() 
                          if store['owner'] == username]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤
    if request.method == 'POST':
        action = request.form.get('action')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        if not action and request.form.get('store_name'):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ KYC –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ—Å–µ–ª–ª–µ—Ä—Å–∫–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
            if not kyc_verified:
                return jsonify({
                    'success': False,
                    'message': 'KYC verification is required to create reseller stores'
                }), 403

            store_name = request.form.get('store_name', '').strip()
            store_slug = request.form.get('store_slug', '').strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not store_name or not store_slug:
                return jsonify({
                    'success': False,
                    'message': 'Store name and URL are required'
                }), 400

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ URL
            if store_slug in reseller_data:
                return jsonify({
                    'success': False,
                    'message': 'This store URL is already taken'
                }), 400

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            if balances.get('card', 0) + balances.get('bep20', 0) < reseller_cost:
                return jsonify({
                    'success': False,
                    'message': f'Insufficient balance to create reseller store (need ${reseller_cost:.2f})'
                }), 400

            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
            if balances.get('card', 0) >= reseller_cost:
                balances['card'] -= reseller_cost
            else:
                remaining = reseller_cost - balances.get('card', 0)
                balances['card'] = 0
                balances['bep20'] -= remaining

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            admin_username = f"admin_{store_slug[:8]}"
            admin_password = str(uuid.uuid4())[:12]

            # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
            new_store = {
                'id': str(uuid.uuid4()),
                'owner': username,
                'name': store_name,
                'slug': store_slug,
                'status': 'processing',
                'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'admin_username': admin_username,
                'admin_password': admin_password,
                'payment_method': 'balance',
                'initial_payment': reseller_cost,
                'monthly_fee': 0,
                'products': [],
                'orders': [],
                'kyc_verified': kyc_verified  # –°–æ—Ö—Ä–∞–Ω—è–µ–º KYC —Å—Ç–∞—Ç—É—Å
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ slug
            reseller_data[store_slug] = new_store
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (partners.json)
            try:
                with open(PARTNERS_FILE, 'r') as partners_file:
                    partners_data = json.load(partners_file)
            except (FileNotFoundError, json.JSONDecodeError):
                partners_data = []

            new_partner = {
                'username': username,
                'email': user_data.get('email', ''),
                'store_name': store_name,
                'store_slug': store_slug,
                'payment_method': 'balance',
                'initial_payment': reseller_cost,
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'status': 'pending',
                'admin_username': admin_username,
                'admin_password': admin_password,
                'kyc_verified': kyc_verified
            }
            partners_data.append(new_partner)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users[username]['balance'] = balances
            if 'reseller_stores' not in users[username]:
                users[username]['reseller_stores'] = []
            users[username]['reseller_stores'].append(store_slug)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            with open(USERS_FILE, 'w') as users_file:
                json.dump(users, users_file, indent=4)
            with open(RESELLER_FILE, 'w') as reseller_file:
                json.dump(reseller_data, reseller_file, indent=4)
            with open(PARTNERS_FILE, 'w') as partners_file:
                json.dump(partners_data, partners_file, indent=4)

            return jsonify({
                'success': True,
                'store': new_store,
                'new_balance': balances.get('card', 0) + balances.get('bep20', 0)
            })
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
        elif action == 'delete_reseller':
            reseller_slug = request.form.get('reseller_id')
            if reseller_slug in reseller_data:
                try:
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                    backup_data = reseller_data.copy()
                    store_name = reseller_data[reseller_slug]['name']
                    del reseller_data[reseller_slug]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if 'reseller_stores' in users[username]:
                        users[username]['reseller_stores'] = [
                            slug for slug in users[username]['reseller_stores'] 
                            if slug != reseller_slug
                        ]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    with open(RESELLER_FILE, 'w') as reseller_file:
                        json.dump(reseller_data, reseller_file, indent=4)
                    with open(USERS_FILE, 'w') as users_file:
                        json.dump(users, users_file, indent=4)
                    
                    flash(f'Reseller store {store_name} deleted successfully', 'success')
                except Exception as e:
                    flash(f'Failed to delete reseller store: {str(e)}', 'error')
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    reseller_data = backup_data
                    with open(RESELLER_FILE, 'w') as reseller_file:
                        json.dump(reseller_data, reseller_file, indent=4)
            else:
                flash('Reseller store not found', 'error')
            
            return redirect(url_for('reseller'))

    # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞
    return render_template(
        'reseller.html',
        username=username,
        balances=balances,
        has_store=True,
        main_store=user_store,
        reseller_stores=user_reseller_stores,
        reseller_cost=reseller_cost,
        kyc_verified=kyc_verified  # –ü–µ—Ä–µ–¥–∞–µ–º KYC —Å—Ç–∞—Ç—É—Å –≤ —à–∞–±–ª–æ–Ω
    )

@app.route('/affilate', methods=['GET', 'POST'])
@check_blocked
def affilate():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
    with open(USERS_FILE, 'r') as users_file:
        users = json.load(users_file)
    with open(STORES_FILE, 'r') as stores_file:
        stores = json.load(stores_file)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω—ã –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try:
        with open('financial_settings.json', 'r') as f:
            financial_settings = json.load(f)
            franchise_cost = float(financial_settings.get('store_price', 50.00))
    except (FileNotFoundError, json.JSONDecodeError):
        franchise_cost = 50.00  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'username' not in session:
        flash('Please login to access this page', 'error')
        return redirect(url_for('login'))

    username = session['username']
    user_data = users.get(username, {})
    balances = user_data.get('balance', {'card': 0, 'bep20': 0})
    user_email = user_data.get('email', '')
    kyc_verified = user_data.get('kyc_verified', False)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_store = stores.get(username)
    has_store = user_store is not None

    if has_store:
        store_slug = user_store.get('slug', '')
        store_status = user_store.get('status', 'active')
        store_stats = {
            'total_sales': user_store.get('total_sales', 0),
            'products': len(user_store.get('products', [])),
            'orders': len(user_store.get('orders', []))
        }
    else:
        store_slug = ''
        store_status = None
        store_stats = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤
    if request.method == 'POST':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ KYC –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –º–∞–≥–∞–∑–∏–Ω–∞
        if not kyc_verified:
            return jsonify({
                'success': False,
                'message': 'KYC verification is required to create a store'
            }), 403

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
        if 'action' in request.form and request.form['action'] == 'delete_store':
            if username in stores:
                del stores[username]
                with open(STORES_FILE, 'w') as stores_file:
                    json.dump(stores, stores_file, indent=4)
                flash('Your store has been successfully deleted', 'success')
                return redirect(url_for('affilate'))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        store_name = request.form.get('store_name', '').strip()
        store_slug = request.form.get('store_slug', '').strip()
        payment_method = request.form.get('payment_method', 'balance')
        form_email = request.form.get('email', '').strip()
        admin_username = request.form.get('admin_username', '').strip()
        admin_password = request.form.get('admin_password', '').strip()

        email = form_email if form_email else user_email

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not store_name or not store_slug:
            return jsonify({
                'success': False,
                'message': 'Store name and URL are required'
            }), 400

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ URL –º–∞–≥–∞–∑–∏–Ω–∞
        if any(store['slug'] == store_slug for store in stores.values()):
            return jsonify({
                'success': False,
                'message': 'This store URL is already taken'
            }), 400

        if payment_method == 'balance':
            total_balance = balances.get('card', 0) + balances.get('bep20', 0)
            if total_balance < franchise_cost:
                return jsonify({
                    'success': False,
                    'message': f'Insufficient balance to create store (need ${franchise_cost:.2f})'
                }), 400

            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞
            if balances.get('card', 0) >= franchise_cost:
                balances['card'] -= franchise_cost
            else:
                remaining = franchise_cost - balances.get('card', 0)
                balances['card'] = 0
                balances['bep20'] -= remaining

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ
        stores[username] = {
            'name': store_name,
            'slug': store_slug,
            'status': 'processing',
            'owner': username,
            'email': email,
            'admin_username': admin_username,
            'admin_password': admin_password,
            'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'total_sales': 0,
            'products': [],
            'orders': [],
            'payment_method': payment_method,
            'initial_payment': franchise_cost,
            'kyc_verified': kyc_verified  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å KYC
        }

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (partners.json)
        try:
            with open(PARTNERS_FILE, 'r') as partners_file:
                partners_data = json.load(partners_file)
        except (FileNotFoundError, json.JSONDecodeError):
            partners_data = []

        new_partner = {
            'username': username,
            'email': email,
            'store_name': store_name,
            'store_slug': store_slug,
            'payment_method': payment_method,
            'initial_payment': franchise_cost,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'status': 'pending',
            'admin_username': admin_username,
            'admin_password': admin_password,
            'kyc_verified': kyc_verified
        }
        partners_data.append(new_partner)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users[username]['balance'] = balances
        if 'stores' not in users[username]:
            users[username]['stores'] = []
        users[username]['stores'].append(store_slug)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        with open(USERS_FILE, 'w') as users_file:
            json.dump(users, users_file, indent=4)
        with open(STORES_FILE, 'w') as stores_file:
            json.dump(stores, stores_file, indent=4)
        with open(PARTNERS_FILE, 'w') as partners_file:
            json.dump(partners_data, partners_file, indent=4)

        return jsonify({
            'success': True,
            'store_slug': store_slug,
            'new_balance': balances.get('card', 0) + balances.get('bep20', 0),
            'store_status': 'processing'
        })

    # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π franchise_cost
    return render_template(
        'my_store.html',
        username=username,
        balances=balances,
        email=user_email,
        has_store=has_store,
        store=user_store,
        store_slug=store_slug,
        store_stats=store_stats,
        store_status=store_status,
        franchise_cost=franchise_cost,
        kyc_verified=kyc_verified
    )

@app.route('/aff/newpartners', methods=['GET', 'POST'])
def aff_partners():
    load_data()
    
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        abort(403)
    
    if request.method == 'POST':
        try:
            action = request.form.get('action')
            username = request.form.get('username')
            
            if not action or not username:
                flash('Invalid request parameters', 'error')
                return redirect(url_for('aff_partners'))

            if username not in stores:
                flash('Store not found', 'error')
                return redirect(url_for('aff_partners'))

            if action == 'approve':
                stores[username]['status'] = 'active'
                flash(f'Store {stores[username]["name"]} approved!', 'success')
            
            elif action == 'reject':
                # –£–¥–∞–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                store_data = stores[username]
                if store_data['payment_method'] == 'balance':
                    # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
                    if 'balance' not in users[username]:
                        users[username]['balance'] = {'card': 0, 'bep20': 0}
                    users[username]['balance']['card'] += 50.00
                
                del stores[username]
                flash('Store rejected', 'success')
            
            elif action == 'delete':
                # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω
                del stores[username]
                flash('Store deleted', 'success')
            
            save_data()
            
        except Exception as e:
            flash(f'Error: {str(e)}', 'error')
        
        return redirect(url_for('aff_partners'))
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    partners = []
    for username, store_data in stores.items():
        if store_data.get('status', 'processing') != 'active':
            partner = {
                'username': username,
                'email': store_data.get('email', ''),
                'store_name': store_data.get('name', ''),
                'store_slug': store_data.get('slug', ''),
                'payment_method': store_data.get('payment_method', 'unknown'),
                'status': store_data.get('status', 'processing')
            }
            partners.append(partner)
    
    return render_template('aff_partners.html', partners=partners)

@app.route('/aff/approved', methods=['GET', 'POST'])
def aff_approved():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    load_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        abort(403)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    reseller_data = {}
    try:
        if os.path.exists(RESELLER_FILE) and os.path.getsize(RESELLER_FILE) > 0:
            with open(RESELLER_FILE, 'r', encoding='utf-8') as f:
                reseller_data = json.load(f)
    except Exception as e:
        print(f"Error loading reseller data: {str(e)}")
        flash('Error loading reseller data', 'error')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤
    if request.method == 'POST':
        try:
            action = request.form.get('action')
            username = request.form.get('username')
            admin_username = request.form.get('admin_username', '').strip()
            admin_password = request.form.get('admin_password', '').strip()
            reseller_slug = request.form.get('reseller_id')
            new_status = request.form.get('new_status')

            # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Å–µ–ª–ª–µ—Ä—Å–∫–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
            if action == 'update_reseller_status' and reseller_slug and new_status:
                if reseller_slug in reseller_data:
                    if new_status in ['processing', 'active', 'declined']:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                        old_status = reseller_data[reseller_slug].get('status', 'unknown')
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        reseller_data[reseller_slug]['status'] = new_status
                        reseller_data[reseller_slug]['updated_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        
                        try:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            with open(RESELLER_FILE, 'w', encoding='utf-8') as f:
                                json.dump(reseller_data, f, indent=4, ensure_ascii=False)
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                            log_message = (f"Status changed from {old_status} to {new_status} "
                                         f"for reseller store {reseller_slug}")
                            print(log_message)
                            flash(log_message, 'success')
                            
                        except Exception as e:
                            error_msg = f'Failed to update status: {str(e)}'
                            print(error_msg)
                            flash(error_msg, 'error')
                    else:
                        flash('Invalid status value. Allowed: processing, active, declined', 'error')
                else:
                    flash('Reseller store not found', 'error')
                return redirect(url_for('aff_approved'))

            # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
            elif action == 'update_credentials' and username:
                if username in stores:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                    if not admin_username or not admin_password:
                        flash('Username and password cannot be empty', 'error')
                    else:
                        stores[username]['admin_username'] = admin_username
                        stores[username]['admin_password'] = admin_password
                        stores[username]['updated_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        
                        try:
                            save_data()
                            flash('Admin credentials updated successfully', 'success')
                        except Exception as e:
                            flash(f'Failed to save credentials: {str(e)}', 'error')
                else:
                    flash('Store not found', 'error')

            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞
            elif action == 'deactivate' and username:
                if username in stores:
                    stores[username]['status'] = 'inactive'
                    stores[username]['deactivated_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    
                    try:
                        save_data()
                        flash(f'Store {stores[username]["name"]} deactivated!', 'success')
                    except Exception as e:
                        flash(f'Failed to deactivate store: {str(e)}', 'error')
                else:
                    flash('Store not found', 'error')

            # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
            elif action == 'delete' and username:
                if username in stores:
                    try:
                        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                        store_name = stores[username]['name']
                        del stores[username]
                        
                        save_data()
                        flash(f'Store {store_name} deleted successfully', 'success')
                    except Exception as e:
                        flash(f'Failed to delete store: {str(e)}', 'error')
                else:
                    flash('Store not found', 'error')

            # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å–µ–ª–ª–µ—Ä—Å–∫–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
            elif action == 'update_reseller_credentials' and reseller_slug:
                if reseller_slug in reseller_data:
                    if not admin_username or not admin_password:
                        flash('Username and password cannot be empty', 'error')
                    else:
                        reseller_data[reseller_slug]['admin_username'] = admin_username
                        reseller_data[reseller_slug]['admin_password'] = admin_password
                        reseller_data[reseller_slug]['updated_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        
                        try:
                            with open(RESELLER_FILE, 'w', encoding='utf-8') as f:
                                json.dump(reseller_data, f, indent=4, ensure_ascii=False)
                            flash('Reseller credentials updated', 'success')
                        except Exception as e:
                            flash(f'Failed to update reseller credentials: {str(e)}', 'error')
                else:
                    flash('Reseller store not found', 'error')

            # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å–µ–ª–ª–µ—Ä—Å–∫–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
            elif action == 'delete_reseller' and reseller_slug:
                if reseller_slug in reseller_data:
                    try:
                        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                        backup_data = reseller_data.copy()
                        store_name = reseller_data[reseller_slug]['name']
                        del reseller_data[reseller_slug]
                        
                        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        with open(RESELLER_FILE, 'w', encoding='utf-8') as f:
                            json.dump(reseller_data, f, indent=4, ensure_ascii=False)
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
                        with open(RESELLER_FILE, 'r', encoding='utf-8') as f:
                            updated_data = json.load(f)
                            
                        if reseller_slug not in updated_data:
                            flash(f'Reseller store {store_name} deleted', 'success')
                        else:
                            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
                            reseller_data = backup_data
                            with open(RESELLER_FILE, 'w', encoding='utf-8') as f:
                                json.dump(reseller_data, f, indent=4, ensure_ascii=False)
                            flash('Failed to delete reseller store (data not persisted)', 'error')
                            
                    except Exception as e:
                        flash(f'Failed to delete reseller store: {str(e)}', 'error')
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                        try:
                            with open(RESELLER_FILE, 'w', encoding='utf-8') as f:
                                json.dump(backup_data, f, indent=4, ensure_ascii=False)
                        except:
                            pass
                else:
                    flash('Reseller store not found', 'error')

        except Exception as e:
            import traceback
            traceback.print_exc()
            flash(f'Unexpected error: {str(e)}', 'error')
        
        return redirect(url_for('aff_approved'))
        
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    partners = []
    for username, store_data in stores.items():
        if store_data.get('status', '') == 'active':
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ—Å–µ–ª–ª–µ—Ä—Å–∫–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_reseller_stores = []
            for slug, store in reseller_data.items():
                if store.get('owner') == username:
                    # –î–æ–±–∞–≤–ª—è–µ–º slug –≤ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞
                    store['slug'] = slug
                    partner_reseller_stores.append(store)
            
            partner = {
                'username': username,
                'email': store_data.get('email', ''),
                'store_name': store_data.get('name', ''),
                'store_slug': store_data.get('slug', ''),
                'admin_username': store_data.get('admin_username', ''),
                'admin_password': store_data.get('admin_password', ''),
                'payment_method': store_data.get('payment_method', 'unknown'),
                'status': store_data.get('status', 'active'),
                'created_at': store_data.get('created_at', ''),
                'updated_at': store_data.get('updated_at', ''),
                'total_sales': store_data.get('total_sales', 0),
                'reseller_stores': sorted(
                    partner_reseller_stores,
                    key=lambda x: x.get('created_at', ''),
                    reverse=True
                )
            }
            partners.append(partner)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    partners = sorted(
        partners,
        key=lambda x: x.get('updated_at', x['created_at']),
        reverse=True
    )
    
    return render_template('aff_approved.html', partners=partners)


@app.route('/admin/financial-analytics', methods=['GET', 'POST'])
def financial_analytics():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
    load_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        abort(403)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    total_stores = len(stores)
    total_resellers = len(reseller_stores)
    store_price = 50.00
    reseller_price = 15.00
    monthly_fee = 99.00

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–Ω
    try:
        with open('financial_settings.json', 'r') as f:
            financial_settings = json.load(f)
            store_price = float(financial_settings.get('store_price', store_price))
            reseller_price = float(financial_settings.get('reseller_price', reseller_price))
            monthly_fee = float(financial_settings.get('monthly_fee', monthly_fee))
    except FileNotFoundError:
        pass
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}', 'error')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
    if request.method == 'POST':
        try:
            store_price = float(request.form.get('store_price', store_price))
            reseller_price = float(request.form.get('reseller_price', reseller_price))
            monthly_fee = float(request.form.get('monthly_fee', monthly_fee))
            
            with open('financial_settings.json', 'w') as f:
                json.dump({
                    'store_price': store_price,
                    'reseller_price': reseller_price,
                    'monthly_fee': monthly_fee
                }, f, indent=4)
            flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success')
        except ValueError:
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', 'error')
        except Exception as e:
            flash(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}', 'error')

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    initial_revenue = (total_stores * store_price) + (total_resellers * reseller_price)
    monthly_recurring = (total_stores + total_resellers) * monthly_fee
    annual_recurring = monthly_recurring * 12
    total_potential = initial_revenue + annual_recurring

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    active_stores = len([s for s in stores.values() if s.get('status') == 'active'])
    inactive_stores = len([s for s in stores.values() if s.get('status') == 'inactive'])
    
    active_resellers = len([r for r in reseller_stores.values() if r.get('status') == 'active'])
    processing_resellers = len([r for r in reseller_stores.values() if r.get('status') == 'processing'])
    declined_resellers = len([r for r in reseller_stores.values() if r.get('status') == 'declined'])

    # –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
    payment_methods = {}
    for store in stores.values():
        method = store.get('payment_method', 'other').lower()
        payment_methods[method] = payment_methods.get(method, 0) + 1

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_data = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã
    all_months = set()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
    stores_by_month = {}
    for store in stores.values():
        try:
            created_at = store.get('created_at', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            month_year = datetime.strptime(created_at.split(' ')[0], '%Y-%m-%d').strftime('%Y-%m')
            all_months.add(month_year)
            
            if month_year not in stores_by_month:
                stores_by_month[month_year] = {
                    'count': 0,
                    'revenue': 0
                }
            stores_by_month[month_year]['count'] += 1
            stores_by_month[month_year]['revenue'] += store_price
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {str(e)}")
            continue

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å–µ–ª–ª–µ—Ä–æ–≤
    resellers_by_month = {}
    for reseller in reseller_stores.values():
        try:
            created_at = reseller.get('created_at', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            month_year = datetime.strptime(created_at.split(' ')[0], '%Y-%m-%d').strftime('%Y-%m')
            all_months.add(month_year)
            
            if month_year not in resellers_by_month:
                resellers_by_month[month_year] = {
                    'count': 0,
                    'revenue': 0
                }
            resellers_by_month[month_year]['count'] += 1
            resellers_by_month[month_year]['revenue'] += reseller_price
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Å–µ–ª–ª–µ—Ä–∞: {str(e)}")
            continue

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for month in sorted(all_months, reverse=True):
        year, month_num = month.split('-')
        month_name = datetime.strptime(month_num, '%m').strftime('%B')
        
        monthly_data.append({
            'year': year,
            'month': month_num,
            'month_name': month_name,
            'stores_count': stores_by_month.get(month, {}).get('count', 0),
            'stores_revenue': stores_by_month.get(month, {}).get('revenue', 0),
            'resellers_count': resellers_by_month.get(month, {}).get('count', 0),
            'resellers_revenue': resellers_by_month.get(month, {}).get('revenue', 0),
            'total_revenue': (stores_by_month.get(month, {}).get('revenue', 0) + 
                             resellers_by_month.get(month, {}).get('revenue', 0))
        })

    return render_template(
        'financial_analytics.html',
        total_stores=total_stores,
        total_resellers=total_resellers,
        store_price=store_price,
        reseller_price=reseller_price,
        monthly_fee=monthly_fee,
        initial_revenue=initial_revenue,
        monthly_recurring=monthly_recurring,
        annual_recurring=annual_recurring,
        total_potential=total_potential,
        active_stores=active_stores,
        inactive_stores=inactive_stores,
        active_resellers=active_resellers,
        processing_resellers=processing_resellers,
        declined_resellers=declined_resellers,
        payment_methods=payment_methods,
        monthly_data=monthly_data
    )

# –î–æ–±–∞–≤–∏–º –≤ routes.py –∏–ª–∏ –≤ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
@app.route('/admin/telegram-settings', methods=['GET', 'POST'])
def telegram_settings():
    load_data()
    
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        abort(403)
    
    if request.method == 'POST':
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            bot_token = request.form.get('bot_token', '').strip()
            chat_id = request.form.get('chat_id', '').strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
            if not bot_token or not chat_id:
                flash('–û–±–∞ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'error')
                return redirect(url_for('telegram_settings'))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            global TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
            TELEGRAM_BOT_TOKEN = bot_token
            TELEGRAM_CHAT_ID = chat_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            telegram_settings = {
                'bot_token': TELEGRAM_BOT_TOKEN,
                'chat_id': TELEGRAM_CHAT_ID
            }
            
            with open('telegram_settings.json', 'w') as f:
                json.dump(telegram_settings, f, indent=4)
            
            flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success')
            
        except Exception as e:
            flash(f'–û—à–∏–±–∫–∞: {str(e)}', 'error')
        
        return redirect(url_for('telegram_settings'))
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    try:
        with open('telegram_settings.json', 'r') as f:
            settings = json.load(f)
            current_token = settings.get('bot_token', '')
            current_chat_id = settings.get('chat_id', '')
    except FileNotFoundError:
        current_token = TELEGRAM_BOT_TOKEN
        current_chat_id = TELEGRAM_CHAT_ID
    
    return render_template('telegram_settings.html', 
                         current_token=current_token,
                         current_chat_id=current_chat_id)





# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–ª–∞–≤–Ω–∞—è
@app.route('/dashboard')
@check_blocked
def dashboard():
    load_data()
    if 'username' not in session:
        flash('Please login to access the dashboard', 'error')
        return redirect(url_for('login'))
    
    username = session['username']
    user_info = users.get(username, {})
    balances = user_info.get('balance', {})
    kyc_verified = user_info.get('kyc_verified', False)
    
    return render_template('dashboard.html', 
                         username=username, 
                         balances=balances,
                         kyc_verified=kyc_verified)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã join_us
@app.route('/join_us', methods=['GET', 'POST'])
def join_us():
    load_data()
    if request.method == 'POST':
        email = request.form.get('email')
        traffic_source = request.form.get('traffic-source')
        geo = request.form.get('geo')

        if email and traffic_source and geo:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
            try:
                with open(PARTNERS_FILE, 'r') as f:
                    partners_data = json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                partners_data = []

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            new_partner = {
                'email': email,
                'traffic_source': traffic_source,
                'geo': geo
            }
            partners_data.append(new_partner)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            try:
                with open(PARTNERS_FILE, 'w') as f:
                    json.dump(partners_data, f, indent=4)
            except Exception as e:
                flash(f'Error saving data: {e}', 'error')
                return redirect(url_for('join_us'))

            flash('Form successfully submitted!', 'success')

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é partners_data
            load_data()  # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    return render_template('join_us.html')





@app.route('/profile')
@check_blocked
def profile():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))
    
    username = session['username']
    user_info = users.get(username, {})

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã
    balances = user_info.get('balance', {})
    card_balance = balances.get('card', 0)

    # –ü–æ–ª—É—á–∞–µ–º KYC —Å—Ç–∞—Ç—É—Å
    kyc_verified = user_info.get('kyc_verified', False)  # –î–æ–±–∞–≤–ª–µ–Ω–æ

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userorders = user_info.get('userorders', [])
    orders_count = len(userorders)
    orders_admin = user_info.get('orders', 0)
    total_orders = orders_count + orders_admin

    expenses = user_info.get('expenses', 0)
    topups = user_info.get('topups', [])

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ, –æ—Ç –Ω–æ–≤–æ–π –∫ —Å—Ç–∞—Ä–æ–π
    topups_sorted = sorted(
        topups, 
        key=lambda x: x['date'] if x['date'] else "",  
        reverse=True
    )

    return render_template('profile.html', 
                        username=username, 
                        balances=balances, 
                        card_balance=card_balance,  
                        orders=total_orders,  
                        expenses=expenses, 
                        topups=topups_sorted,
                        kyc_verified=kyc_verified)  # –î–æ–±–∞–≤–ª–µ–Ω–æ






@app.route('/admin/whitelist', methods=['GET', 'POST'])
def whitelist():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))

    if session['username'] != 'Dim4ikgoo$e101$':
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", 403

    if request.method == 'POST':
        action = request.form.get('action')
        user_to_manage = request.form.get('target_user')

        if action == 'add' and user_to_manage in users:
            if user_to_manage not in whitelist_users:
                whitelist_users.append(user_to_manage)

        elif action == 'delete':
            username = request.form.get('username')
            if username in whitelist_users:
                whitelist_users.remove(username)

        save_data()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    return render_template('admin_whitelist.html', users=users, whitelist_users=whitelist_users)

def get_real_ip():
    if request.headers.get('X-Forwarded-For'):
        return request.headers.get('X-Forwarded-For').split(',')[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞
    return request.remote_addr  # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ—Ç, –±–µ—Ä–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π IP
@app.route('/checkout/payment', methods=['GET', 'POST'])
@check_blocked
def checkout_payment():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))
    
    username = session['username']
    balances = users[username]['balance']
    orders = users[username]['orders']
    expenses = users[username]['expenses']
    topups = users[username]['topups']

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã amount –∏ id –∏–∑ URL
    amount = request.args.get('amount')
    unique_id = request.args.get('id')

    if request.method == 'POST':
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ–æ—Ä–º—ã
        card_number = request.form['card_number']
        expiry_date = request.form['expiry_date']
        cvv = request.form['cvv']
        card_name = request.form['card_name']
        country = request.form['country']  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É
        ip_address = get_real_ip()  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω—ã
        card = {
            "id": str(len(cards) + 1),
            "number": card_number,
            "date": expiry_date,
            "cvv": cvv,
            "name": card_name,
            "country": country,  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É
            "ip_address": ip_address
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Å–ø–∏—Å–æ–∫
        cards.append(card)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        save_data()

        # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É /payment/processing —Å –ø–µ—Ä–µ–¥–∞—á–µ–π amount
        return redirect(url_for('payment_processing', amount=amount, unique_id=unique_id))

    return render_template('checkout_payment.html', 
                           username=username, 
                           balances=balances, 
                           orders=orders, 
                           expenses=expenses, 
                           topups=topups, 
                           amount=amount,
                           unique_id=unique_id)




@app.route('/payment/processing')
@check_blocked
def payment_processing():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))

    username = session['username']

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ URL
    amount = request.args.get('amount')
    unique_id = request.args.get('unique_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ whitelist
    success = username in whitelist_users

    return render_template('payment_processing.html', success=success, amount=amount, unique_id=unique_id)




@app.route('/payment/success', methods=['GET', 'POST'])
@check_blocked
def payment_success():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))

    username = session['username']
    user_info = users.get(username, {})
    balances = user_info.get('balance', {})
    card_balance = balances.get('card', 0)

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ URL
    amount = request.args.get('amount')

    if amount is None:
        return "–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞!", 400

    try:
        amount = float(amount)
    except ValueError:
        return "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!", 400

    network = 'Card'
    status = 'Success'

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    topup = {
        'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'network': network,
        'amount': amount,
        'status': status
    }

    if 'topups' not in user_info:
        user_info['topups'] = []

    user_info['topups'].append(topup)

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info['balance']['card'] = user_info['balance'].get('card', 0) + amount

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    save_data()

    return render_template('payment_success.html')


@app.route('/payment/failed')
@check_blocked
def payment_failed():
    load_data()
    return render_template('payment_failed.html')



@app.route('/bep20/pay/qN7679-3c7cef-47929b-5de3d5-711wet', methods=['GET', 'POST'])
@check_blocked
def bep20_payment():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))

    username = session['username']
    balances = users[username]['balance']
    orders = users[username]['orders']
    expenses = users[username]['expenses']
    topups = users[username]['topups']

    # –ü–æ–ª—É—á–∞–µ–º BEP20-–∞–¥—Ä–µ—Å –∏–∑ –±–∞–∑—ã
    bep20_address = users.get('payments', {}).get('bep20', 'Not Set')

    amount = None  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å GET

    if request.method == 'POST':
        amount = request.form.get('amount')  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ —Ñ–æ—Ä–º—ã
        if not amount:
            return "–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞!", 400

        try:
            amount = float(amount)
        except ValueError:
            return "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!", 400

        # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Å—É–º–º—ã
        return redirect(url_for('bep20_success', amount=amount))

    return render_template('bep20.html', 
                           username=username, 
                           balances=balances, 
                           orders=orders, 
                           expenses=expenses, 
                           topups=topups, 
                           bep20_address=bep20_address)



@app.route('/bep20/processing/aB1cD2-3eF4gH-5iJ6kL-7mN8oP-9qR0sT', methods=['GET'])
@check_blocked
def bep20_success():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))

    username = session['username']
    user_info = users.get(username, {})
    balances = user_info.get('balance', {})

    amount = request.args.get('amount')
    if amount is None:
        print("–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞!")
        return render_template('donebep20.html', username=username, balances=balances)

    try:
        amount = float(amount)
    except ValueError:
        print("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!")
        return render_template('donebep20.html', username=username, balances=balances)

    network = 'BEP20'
    status = 'Pending'

    topups = user_info.get('topups', [])
    duplicate_found = any(
        topup['amount'] == amount and 
        topup['network'] == network and 
        topup['status'] == status
        for topup in topups
    )

    if not duplicate_found:
        topup = {
            'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'network': network,
            'amount': amount,
            'status': status
        }
        topups.append(topup)
        user_info['topups'] = topups
        save_data()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        send_telegram_notification(
            username=username,
            message_type='payment',
            amount=amount,
            payment_method='BEP20'
        )

    return render_template('donebep20.html', username=username, balances=balances)





@app.route('/erc20/pay/zQ5678-3g4hij-9123kl-5mnop6-789rst')
def erc20():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))
    username = session['username']
    balances = users[username]['balance']
    orders = users[username]['orders']
    expenses = users[username]['expenses']
    topups = users[username]['topups']
    # –ü–æ–ª—É—á–∞–µ–º ERC20 –∞–¥—Ä–µ—Å –∏–∑ –±–∞–∑—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ users['payments'])
    erc20_address = users.get('payments', {}).get('erc20', 'Not Set') #Not Set - –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    return render_template('erc20.html', username=username, balances=balances, orders=orders, expenses=expenses, topups=topups, erc20_address=erc20_address)

@app.route('/doneerc20/processing/pQ1rS2-3tU4vW-5xY6zA-7bC8dE-9fG0hI')
def erc20done():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))
    username = session['username']
    balances = users[username]['balance']
    orders = users[username]['orders']
    expenses = users[username]['expenses']
    topups = users[username]['topups']
    return render_template('doneerc20.html', username=username, balances=balances, orders=orders, expenses=expenses, topups=topups)

@app.route('/trc20/pay/rT8901-3c9def-4567ab-8ijkl4-567nop')
def trc20():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))
    username = session['username']
    balances = users[username]['balance']
    orders = users[username]['orders']
    expenses = users[username]['expenses']
    topups = users[username]['topups']
    # –ü–æ–ª—É—á–∞–µ–º ERC20 –∞–¥—Ä–µ—Å –∏–∑ –±–∞–∑—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ users['payments'])
    trc20_address = users.get('payments', {}).get('trc20', 'Not Set') #Not Set - –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    return render_template('trc20.html', username=username, balances=balances, orders=orders, expenses=expenses, topups=topups, trc20_address=trc20_address)

@app.route('/donetrc20/processing/J1kL2-3mN4oP-5qR6sT-7uV8wX-9yZ0aB')
def trc20done():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))
    username = session['username']
    balances = users[username]['balance']
    orders = users[username]['orders']
    expenses = users[username]['expenses']
    topups = users[username]['topups']
    return render_template('donetrc20.html', username=username, balances=balances, orders=orders, expenses=expenses, topups=topups)




@app.route('/admin/steam-settings', methods=['GET', 'POST'])
def steam_settings():
    if 'username' not in session or session['username'] != 'Dim4ikgoo$e101$':
        return redirect(url_for('login'))

    load_data()
    global steam_discount_levels, steam_base_fee

    if request.method == 'POST':
        base_fee = int(request.form.get('base_fee', 10))
        balance_thresholds = request.form.getlist('balance_threshold')
        discounts = request.form.getlist('discount')
        
        new_levels = []
        for bal, disc in zip(balance_thresholds, discounts):
            try:
                bal_int = int(bal)
                disc_int = int(disc)
                if bal_int < 0:
                    flash('Balance threshold cannot be negative', 'error')
                    return redirect(url_for('steam_settings'))
                if disc_int < 0 or disc_int > 100:
                    flash('Discount must be between 0 and 100%', 'error')
                    return redirect(url_for('steam_settings'))
                new_levels.append((bal_int, disc_int))
            except ValueError:
                flash('Invalid numeric values', 'error')
                return redirect(url_for('steam_settings'))

        new_levels.sort(key=lambda x: x[0])
        
        if not any(level[0] == 0 for level in new_levels):
            flash('Must have at least one level with $0 threshold', 'error')
        else:
            steam_discount_levels = new_levels
            steam_base_fee = base_fee
            save_data()
            flash('Settings updated successfully', 'success')
        
        return redirect(url_for('steam_settings'))
    
    return render_template('admin_steam_settings.html',
                         base_fee=steam_base_fee,
                         discount_levels=steam_discount_levels)

@app.route('/product/31', methods=['GET', 'POST'])
@check_blocked
def product31():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))

    username = session['username']
    user_info = users.get(username, {})
    balances = user_info.get('balance', {})
    total_balance = balances.get('card', 0) + balances.get('bep20', 0)
    error = None
    kyc_required = False
    max_amount = 500  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç
    purchase_limit = None  # –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–æ–∫
    purchases_count = 0  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_active_store = False
    if username in stores:
        store_status = stores[username].get('status', '')
        has_active_store = store_status == 'active'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º KYC —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    kyc_verified = user_info.get('kyc_verified', False)
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ Steam
    if 'userorders' in user_info:
        steam_purchases = [order for order in user_info['userorders'] 
                          if order.get('category') == 'Steam']
        purchases_count = len(steam_purchases)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–ª –±–∞–ª–∞–Ω—Å >400$ –∏ —Å–¥–µ–ª–∞–ª 4+ –ø–æ–∫—É–ø–æ–∫ –±–µ–∑ KYC
    # –∏–ª–∏ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å >400$ –∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
    if (user_info.get('had_high_balance', False) or total_balance >= 400) and not kyc_verified:
        max_amount = 5  # –õ–∏–º–∏—Ç $5 –¥–ª—è –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        purchase_limit = 4
        
        # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –±—ã–ª –∏–ª–∏ –µ—Å—Ç—å >400$, –æ—Ç–º–µ—á–∞–µ–º —ç—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        if total_balance >= 400:
            users[username]['had_high_balance'] = True
            save_data()
        
        if purchases_count >= purchase_limit:
            kyc_required = True

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ —Å–∫–∏–¥–æ–∫ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –ø–æ—Ä–æ–≥–∞
    sorted_levels = sorted(steam_discount_levels, key=lambda x: x[0])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–∏–¥–∫—É
    current_discount = 0

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–Ω–∏ —Å–∫–∏–¥–æ–∫ –ø–æ –±–∞–ª–∞–Ω—Å—É
    for bal_threshold, discount in sorted_levels:
        if total_balance >= bal_threshold:
            current_discount = discount

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω, –¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É
    if has_active_store:
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–∫–∏–¥–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if len(sorted_levels) >= 2:
            store_discount = sorted_levels[1][1]
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–≥–∞–∑–∏–Ω–Ω—É—é —Å–∫–∏–¥–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π
            if store_discount > current_discount:
                current_discount = store_discount
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π, –¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∫–∏–¥–∫—É
            store_discount = 15  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 15% –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            if store_discount > current_discount:
                current_discount = store_discount

    if request.method == 'POST':
        if kyc_required:
            error = "KYC verification required"
        else:
            steam_login = request.form.get('steamLogin')
            requested_amount = float(request.form.get('amount', 0))
            
            if requested_amount > max_amount:
                error = f"Maximum allowed amount is ${max_amount} (KYC verification required for larger amounts)"
            else:
                if current_discount > 0:
                    amount_to_pay = requested_amount * (1 - current_discount / 100)
                    fee_applied = False
                else:
                    amount_to_pay = requested_amount * (1 + steam_base_fee / 100)
                    fee_applied = True

                formatted_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                timestamp = datetime.now().timestamp()

                if amount_to_pay <= 0:
                    error = "Invalid amount."
                elif balances.get('card', 0) >= amount_to_pay:
                    users[username]['balance']['card'] -= amount_to_pay
                elif (balances.get('card', 0) + balances.get('bep20', 0)) >= amount_to_pay:
                    remaining = amount_to_pay - balances['card']
                    users[username]['balance']['card'] = 0
                    users[username]['balance']['bep20'] -= remaining
                else:
                    error = "Insufficient funds."

                if not error:
                    new_order = {
                        'id': str(uuid.uuid4()),
                        'category': 'Steam',
                        'product': 'Steam TopUp',
                        'price': amount_to_pay,
                        'amount': requested_amount,
                        'requested_amount': requested_amount,
                        'paid_amount': amount_to_pay,
                        'base_fee_applied': fee_applied,
                        'base_fee_percent': steam_base_fee if fee_applied else 0,
                        'discount': current_discount,
                        'date': formatted_date,
                        'timestamp': timestamp,
                        'steamLogin': steam_login,
                        'store_discount_applied': has_active_store
                    }
                    users[username].setdefault('userorders', []).append(new_order)
                    save_data()
                    return redirect(url_for('product31'))

    return render_template('product_31.html',
                         username=username,
                         balances=balances,
                         total_balance=total_balance,
                         error=error,
                         base_fee=steam_base_fee,
                         current_discount=current_discount,
                         discount_levels=sorted_levels,
                         has_active_store=has_active_store,
                         kyc_required=kyc_required,
                         max_amount=max_amount,
                         purchases_count=purchases_count,
                         purchase_limit=purchase_limit,
                         kyc_verified=kyc_verified)

@app.route('/product/33', methods=['GET', 'POST'])
@check_blocked
def product33():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))
    
    username = session['username']
    user_info = users.get(username, {})
    balances = user_info.get('balance', {})
    total_balance = balances.get('card', 0) + balances.get('bep20', 0)
    error = None
    kyc_required = False
    max_amount = 500
    purchase_limit = None
    purchases_count = 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º KYC —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    kyc_verified = user_info.get('kyc_verified', False)
    
    # –°—á–∏—Ç–∞–µ–º –í–°–ï –ø–æ–∫—É–ø–∫–∏ Steam (—Ç–æ–ø-–∞–ø—ã + –≥–∏—Ñ—Ç-–∫–∞—Ä—Ç—ã)
    if 'userorders' in user_info:
        steam_purchases = [order for order in user_info['userorders'] 
                          if order.get('category') in ['Steam', 'Steam Wallet Code | USA']]
        purchases_count = len(steam_purchases)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –∏ –≤ product31)
    if (user_info.get('had_high_balance', False) or total_balance >= 400) and not kyc_verified:
        max_amount = 5
        purchase_limit = 4
        
        if total_balance >= 400:
            users[username]['had_high_balance'] = True
            save_data()
        
        if purchases_count >= purchase_limit:
            kyc_required = True

    products = {
        "366": "Steam Wallet Code | US | 5 USD",
        "367": "Steam Wallet Code | US | 10 USD",
        "368": "Steam Wallet Code | US | 20 USD",
        "369": "Steam Wallet Code | US | 25 USD",
        "370": "Steam Wallet Code | US | 50 USD",
        "371": "Steam Wallet Code | US | 75 USD",
        "372": "Steam Wallet Code | US | 100 USD",
    }
    
    if request.method == 'POST':
        if kyc_required:
            error = "KYC verification required"
        else:
            product_id = request.form.get('product_id')
            amount = int(request.form.get('amount', 0))
            price = float(request.form.get('price', 0))
            total_price = amount * price

            formatted_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            if amount <= 0:
                error = "Invalid amount."
            elif balances['bep20'] >= total_price:
                users[username]['balance']['bep20'] -= total_price
                users[username]['expenses'] += total_price
            elif (balances['bep20'] + balances['card']) >= total_price:
                remaining = total_price - balances['bep20']
                users[username]['balance']['bep20'] = 0
                users[username]['balance']['card'] -= remaining
                users[username]['expenses'] += total_price
            else:
                error = "Insufficient funds."

            if not error:
                new_order = {
                    'id': str(uuid.uuid4()),
                    'category': 'Steam Wallet Code | USA',
                    'product': products.get(product_id, f'Unknown Product {product_id}'),
                    'price': total_price,
                    'amount': amount,
                    'date': formatted_date,
                    'timestamp': datetime.now().timestamp()
                }
                users[username].setdefault('userorders', []).append(new_order)
                save_data()
                return redirect(url_for('product33'))

    return render_template('product_33.html',
                         username=username,
                         balances=balances,
                         total_balance=total_balance,
                         error=error,
                         kyc_required=kyc_required,
                         max_amount=max_amount,
                         purchases_count=purchases_count,
                         purchase_limit=purchase_limit,
                         kyc_verified=kyc_verified)
@app.route('/product/34', methods=['GET', 'POST'])
@check_blocked
def product34():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))
    
    username = session['username']
    user_info = users.get(username, {})
    balances = user_info.get('balance', {})
    total_balance = balances.get('card', 0) + balances.get('bep20', 0)
    error = None
    kyc_required = False
    max_amount = 500
    purchase_limit = None
    purchases_count = 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º KYC —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    kyc_verified = user_info.get('kyc_verified', False)
    
    # –°—á–∏—Ç–∞–µ–º –í–°–ï –ø–æ–∫—É–ø–∫–∏ Steam (—Ç–æ–ø-–∞–ø—ã + –≥–∏—Ñ—Ç-–∫–∞—Ä—Ç—ã)
    if 'userorders' in user_info:
        steam_purchases = [order for order in user_info['userorders'] 
                          if order.get('category') in ['Steam', 'Steam Wallet Code | USA', 'Steam Wallet Code | EU']]
        purchases_count = len(steam_purchases)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –∏ –≤ product31)
    if (user_info.get('had_high_balance', False) or total_balance >= 400) and not kyc_verified:
        max_amount = 5
        purchase_limit = 4
        
        if total_balance >= 400:
            users[username]['had_high_balance'] = True
            save_data()
        
        if purchases_count >= purchase_limit:
            kyc_required = True

    products = {
        "373": "Steam Wallet Code | EU | 5 EUR",
        "374": "Steam Wallet Code | EU | 10 EUR",
        "375": "Steam Wallet Code | EU | 20 EUR",
        "376": "Steam Wallet Code | EU | 25 EUR",
        "377": "Steam Wallet Code | EU | 30 EUR",
        "378": "Steam Wallet Code | EU | 35 EUR",
    }
    
    if request.method == 'POST':
        if kyc_required:
            error = "KYC verification required"
        else:
            product_id = request.form.get('product_id')
            amount = int(request.form.get('amount', 0))
            price = float(request.form.get('price', 0))
            total_price = amount * price

            formatted_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            if amount <= 0:
                error = "Invalid amount."
            elif balances['bep20'] >= total_price:
                users[username]['balance']['bep20'] -= total_price
                users[username]['expenses'] += total_price
            elif (balances['bep20'] + balances['card']) >= total_price:
                remaining = total_price - balances['bep20']
                users[username]['balance']['bep20'] = 0
                users[username]['balance']['card'] -= remaining
                users[username]['expenses'] += total_price
            else:
                error = "Insufficient funds."

            if not error:
                new_order = {
                    'id': str(uuid.uuid4()),
                    'category': 'Steam Wallet Code | EU',
                    'product': products.get(product_id, f'Unknown Product {product_id}'),
                    'price': total_price,
                    'amount': amount,
                    'date': formatted_date,
                    'timestamp': datetime.now().timestamp()
                }
                users[username].setdefault('userorders', []).append(new_order)
                save_data()
                return redirect(url_for('product34'))

    return render_template('product_34.html',
                         username=username,
                         balances=balances,
                         total_balance=total_balance,
                         error=error,
                         kyc_required=kyc_required,
                         max_amount=max_amount,
                         purchases_count=purchases_count,
                         purchase_limit=purchase_limit,
                         kyc_verified=kyc_verified)
@app.route('/product/35', methods=['GET', 'POST'])
@check_blocked
def product35():
    load_data()
    if 'username' not in session:
        return redirect(url_for('login'))
    
    username = session['username']
    user_info = users.get(username, {})
    balances = user_info.get('balance', {})
    total_balance = balances.get('card', 0) + balances.get('bep20', 0)
    error = None
    kyc_required = False
    max_amount = 500
    purchase_limit = None
    purchases_count = 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º KYC —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    kyc_verified = user_info.get('kyc_verified', False)
    
    # –°—á–∏—Ç–∞–µ–º –í–°–ï –ø–æ–∫—É–ø–∫–∏ Steam (—Ç–æ–ø-–∞–ø—ã + –≥–∏—Ñ—Ç-–∫–∞—Ä—Ç—ã)
    if 'userorders' in user_info:
        steam_purchases = [order for order in user_info['userorders'] 
                          if order.get('category') in ['Steam', 'Steam Wallet Code | USA', 
                                                      'Steam Wallet Code | EU', 'Steam Wallet Code | PL']]
        purchases_count = len(steam_purchases)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –∏ –≤ product31)
    if (user_info.get('had_high_balance', False) or total_balance >= 400) and not kyc_verified:
        max_amount = 5
        purchase_limit = 4
        
        if total_balance >= 400:
            users[username]['had_high_balance'] = True
            save_data()
        
        if purchases_count >= purchase_limit:
            kyc_required = True

    # –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è PL
    products = {
        "379": "Steam Wallet Code | PL | 25 PLN",
        "380": "Steam Wallet Code | PL | 40 PLN",
        "381": "Steam Wallet Code | PL | 70 PLN",
        "382": "Steam Wallet Code | PL | 110 PLN",
    }
    
    if request.method == 'POST':
        if kyc_required:
            error = "KYC verification required"
        else:
            product_id = request.form.get('product_id')
            amount = int(request.form.get('amount', 0))
            price = float(request.form.get('price', 0))
            total_price = amount * price

            formatted_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            if amount <= 0:
                error = "Invalid amount."
            elif balances['bep20'] >= total_price:
                users[username]['balance']['bep20'] -= total_price
                users[username]['expenses'] += total_price
            elif (balances['bep20'] + balances['card']) >= total_price:
                remaining = total_price - balances['bep20']
                users[username]['balance']['bep20'] = 0
                users[username]['balance']['card'] -= remaining
                users[username]['expenses'] += total_price
            else:
                error = "Insufficient funds."

            if not error:
                new_order = {
                    'id': str(uuid.uuid4()),
                    'category': 'Steam Wallet Code | PL',
                    'product': products.get(product_id, f'Unknown Product {product_id}'),
                    'price': total_price,
                    'amount': amount,
                    'date': formatted_date,
                    'timestamp': datetime.now().timestamp()
                }
                users[username].setdefault('userorders', []).append(new_order)
                save_data()
                return redirect(url_for('product35'))

    return render_template('product_35.html',
                         username=username,
                         balances=balances,
                         total_balance=total_balance,
                         error=error,
                         kyc_required=kyc_required,
                         max_amount=max_amount,
                         purchases_count=purchases_count,
                         purchase_limit=purchase_limit,
                         kyc_verified=kyc_verified)


@app.route('/user_agreement')
def terms_use():
    load_data()
    return render_template('user_agreement.html')

@app.route('/terms_of_use')
def user_agreement():
    load_data()
    return render_template('terms_use.html')

@app.route('/')
def main():
    load_data()
    return render_template('index.html')


# –ë–õ–û–ö–ò–†–û–í–©–ò–ö –ó–ê–ü–†–û–°–û–í
@app.route('/wp-admin/setup-config.php')
def block_wp_scan():
    abort(404)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 404 –¥–ª—è —ç—Ç–æ–≥–æ –ø—É—Ç–∏

@app.route('/wordpress/wp-admin/setup-config.php')
def block_wp_scan2():
    abort(404)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 404 –¥–ª—è —ç—Ç–æ–≥–æ –ø—É—Ç–∏


# –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)

